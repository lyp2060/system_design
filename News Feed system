90% is web system
多线程： 生产者 消费者 --》 snapchat

可行性： work soultion 25%
特定问题： special case 20%
分析能力： Analysis 25%
权衡： tradeoff 15%
知识储备 knowledge base 15%

4S
scenario:
  Ask, features, QPS, DAU , Interface
service
storage
scale 

问的最多的是怎么sharding 数据
storage 这一部分最重要

QPS：300K:
queries per second
日活跃 * 每个用户平均请求次数/一天多少秒 = 150M *60/86400~100K 

peak：  = average concurent users *3---> 300k 

快速增长的产品：
  max peak users in 3 months = peak users *2
  
分析写多还是读多

QPS = 100：用你的笔记本做web 服务器就好了
QPS = 1K: 好点的服务器
QPS = 1m : 1000台服务器集群，需要考虑挂了一台怎么办，上load balancer 

web server: 1K QPS
one SQL database: 1 K QPS  (if need to join and index query, this number will be much less)
No SQL database （Cassandra）10K QPS 
NO SQL dataase (Memcached) 1 M 

数据库是什么，怎么用， 一定要会

merge k sorted array--- > k logk 

异步系统都用到msg queue, 里面存了一些task 
zero m queue, ali queue, kaflar

msg queue 存在内存或者 文件里，都有可能有
redies 也可以做msg queue. 是个生产者消费者模型

editThisCookie
好友关系经常考
方案1： 存为2条信息， A--》 B, B--》A
方案2： 存为一条信息，但查询慢一点

什么是transaction? 给你10块钱，你的加10,我得少10， transaction, no SQL 不支持
NOSQL的数据可能不在同一台机器上，这样无法lock 

index可以帮助快速查询，index 最后怎么实现？用的是tree 做index, 

cassandra: 三层结构
row_key: hash_key, 查询必须带上key, 无法进行range query 
column_key:是排序的，可以进行range query, 可以是复合值，比如timestamp+user_id 
value: 一般来说是string, 如果需要存很多信息，自己serialization 

SQL, 规定好，需要migration 
一条数据以行单位
row1, id, username, emial, password, first_name etc
NO SQL: 以grid 为单位

sharding:
数据拆分，按照一定的规则，将数据拆分为不同的部分，保存在不同的机器上
这样就算挂，也不会网站100%挂掉

数据备份 replica:
一式三份
同时能分担读请求

SQL： 自身不带sharding
NOSQL: 自带sharding 

vertical sharding:
user table 放一台， 放SQL里，信任度？ mySQL 很成熟，mongoDB 曾经丢过数据？ 经常需要filter username?==? email ===? 这些用SQL更好，secondary Index
friendship tabel 放一台
message table 放一台 ETC
缺点：
一个表可能很大

horizontal sharding ： 考的核心
方法1： 简单粗暴，直接奇偶数，或者%10， 问题：机器数目经常变化，比如现在10台机器，然后变成11台，这样取模结果变化非常大，会造成数据大迁移


问题：
usertable, sharding 成 db1, db2, db3 （对user ID %3）,怎么可以查一个用户的email? 
建立一个新的表，只有2个内容： email to ID, 然后通过ID来查数据库，这个表也是一个DB，因为信息量很小，可以很快查询，可以cache 起来



